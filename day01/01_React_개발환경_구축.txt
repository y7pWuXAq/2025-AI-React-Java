<Front-End Server 구축>
 1. node.js 설치
  - 자바스크립트(Javascript)로 네트워크 애플리케이션을 개발 할 수 있는 환경제공
  - 네트워크 : 클라이언트(Client)와 서버(Server) 통신이 가능한 환경을 의미
  - node.js를 설치하면 React와 같은 Front-End 개발 라이브러리를 설치할 수 있는
    --> 설치 패키지 관리자를 제공해줌(설치 패키지를 자동으로 설치해줌)
  - 설치 패키지 : npm 이라고 칭함
  - node.js를 아나콘다라고 생각하면 됨
    npm을 conda 또는 pip라고 생각하면 됨
  - node.js 설치 파일 다운로드 URL : https://nodejs.org/ko
    --> 디폴트로 설치 진행
  - node.js command prompt 창 열기
    --> 아래 명령어로 버전 확인(버전 확인 잘되면 설치 성공)
    --> node --version 
    --> npm --version

  - npm : node package manager (노드 패키지 관리자) 자동 설치됨
    --> React를 포함한 다양한 패키지 라이브러리를 설치/삭제 담당
    --> 버전들 간의 의존성 관리(파이썬의 아나콘다와 유사)

 2. VS-Code에 React관련 확장기능 설치
  - ES7 React/Redux/GraphQL/React-Native snippets 설치
    : React 빠른 코드 입력 도움줌
  - Reactjs code snipets 설치
    : React의 다양한 코드 구조에 대한, 빠른 코드 입력 도움줌
  - Prettier - Code Formatter 설치
    : 코드 스타일 자동 정리(들여쓰기, 줄바꿈 등을 자동 정리함)
  - ESLint 설치됨 
    : Javascript 코드의 스타일 검사, 일과넝 있게 작성할 수 있도록함

 3. React 프로젝트 생성
  - 프로젝트 생성은 npx 명령으로 수행
  - 명령을 수행하면, 프로젝트 폴더가 생성됨
  - 명령 수행전 체크 사항 : 프로젝트 폴더가 생성될 위치로 이동 후 진행
  - node command prompt 창 열기
  - 아래 명령 수행
   >npx create-react-app 생성할_프로젝트_폴더명
   >npx create-react-app 01-react-app
    ** 설치시 (y) 나오면 y 입력 후 엔터

4. React 실행 명령들
 - Front-End React Server 구동
   >npm start

 - 배포를 위해 사용
   >npm run build

 - 테스트를 위해 사용
   >npm test

 -> 우리가 사용할 명령
   ** react 프로젝트 폴더로 이동 후 아래 명령 수행
   >npm start

5. React Front-End Server 시작
   >cd 프로젝트폴더
   >npm start
     --> 실행하면 자동으로 브라우저 open됨
     --> 사용 URL : http://localhost:3000/
     --> 서버 종료 방법 : [Ctrl + c]

6. React에서 페이지간의 이동은 Router 라이브러리를 통해 이동됨
  - 사용자로부터 url 요청이 들어오면, 응답할 페이지 처리 기능을 찾음
  - 이를 'URL 매핑' 이라고 칭합니다.
  - Front-End 내에서의 페이지간 이동을 의미함
  - URL 매핑 처리를 하기위한 라이브러리 : Router
  - 설치가 필요함
   >npm install react-router-dom

7. React Front-End에서 Back-End Server의 API 호출을 위한 URL 관리자 필요함 
  - axios 라이브러를 통해 관리됨
  - 설치 필요
   >npm install axios

******* 위 1~7번까지는 React 프로젝트 생성시 항상 진행해야함 *******
 - 이후 페이지 개발을 진행함....
 - 1~2번이 되어 있는 경우 : 3~7번까지 수행...

<React 기본 사용 폴더 및 파일>
 - public/index.html 
   --> 수정이 필요한 경우
       : 공통 css를 적용하는 경우(src의 App.js에서도 가능)
       : 공통 로고 등을 적용하는 경우(src의 App.js에서도 가능)

 - src/App.js
       : 페이지 처리 결과를 가지고 있는 파일
       : 페이지 처리는 외부 처리 파일을 통해서도 가능
         (외부 처리 파일을 React에서는 컴포넌트라고 칭함)

 - src/index.js
       : index.html에 App.js의 데이터 결과를 렌더링(합치는 곳) 작업 수행
       : 기본적으로 수정이 필요한 경우는 -> App.js의 파일명이 수정된 경우
                                         -> index.html의 id 이름이 수정된 경우